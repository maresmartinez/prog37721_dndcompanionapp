using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using UserManagementLib;
using CharacterCreationLib;

namespace DnDWebApp.Users.Campaigns {
    public partial class CreateNewCampaign : System.Web.UI.Page {

        /// <summary>
        /// All users available to be added to the campaign
        /// </summary>
        List<User> validUsers = new List<User>();
        /// <summary>
        /// The current selected user's characters
        /// </summary>
        List<Character> userCharacters = new List<Character>();
        /// <summary>
        /// The current users that have been added to the party
        /// </summary>
        List<User> selectedUsers = new List<User>();
        /// <summary>
        /// The current characters that have been added to the party
        /// </summary>
        List<Character> selectedCharacters = new List<Character>();
        /// <summary>
        /// The campaign that will be generated by this form
        /// </summary>
        Campaign generatedCampaign;

        /// <summary>
        /// Retrieves valid users from database and binds form elements to users and characters available
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void Page_Load(object sender, EventArgs e) {
            InitUsers();

            if (!IsPostBack) {
                DDDMUsers.DataSource = validUsers;
                DDDMUsers.DataBind();

                DDCampaignUsers.DataSource = validUsers;
                DDCampaignUsers.DataBind();

                Session["userCharacters"] = userCharacters;
                Session["selectedUsers"] = selectedUsers;
                Session["selectedCharacters"] = selectedCharacters;
            } else {
                userCharacters = (List<Character>)Session["userCharacters"];
                selectedUsers = (List<User>)Session["selectedUsers"];
                selectedCharacters = (List<Character>)Session["selectedCharacters"];
            }

            if (Session["generatedCampaign"] != null) {
                generatedCampaign = (Campaign)Session["generatedCampaign"];
            }
        }

        /// <summary>
        /// Validates form input, generates a campaign, and displays it
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void BtnGenerate_Click(object sender, EventArgs e) {
            string name = TxtName.Text;
            string description = TxtDescription.Text;
            User dm = validUsers[DDDMUsers.SelectedIndex];
            List<User> campaignUsers = selectedUsers;
            List<Character> campaignCharacters = selectedCharacters;

            Campaign campaign = null;
            try {
                campaign = new Campaign(name, description, campaignUsers, campaignCharacters, dm);
            } catch (ArgumentException ex) {
                LblErrorGenerate.Text = ex.Message;
                return;
            }

            Session["generatedCampaign"] = campaign;
            DisplayCampaign(campaign);
        }

        /// <summary>
        /// Takes the generated campaign and saves it to the user's campaigns
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void BtnSave_Click(object sender, EventArgs e) {
            // TODO: save campaign to the database
            Campaign saveCampaign = (Campaign)Session["generatedCampaign"];
        }

        /// <summary>
        /// Discards the current campaign that was generated
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void BtnDiscard_Click(object sender, EventArgs e) {
            Response.Redirect("~/Users/Campaigns/CreateNewCampaign.aspx");
        }

        /// <summary>
        /// Displays the campaign that was generated
        /// </summary>
        /// <param name="campaign"></param>
        private void DisplayCampaign(Campaign campaign) {
            LblCampaignName.Text = campaign.CampaignName;
            CampaignDescription.InnerText = campaign.CampaignDescription;
            DMName.InnerText = campaign.DungeonMaster.FullName + " (" + campaign.DungeonMaster.Username + ")";

            DDPartyMembers.DataSource = campaign.CampaignCharacters;
            DDPartyMembers.DataBind();

            // Ensure the first character is displayed
            DisplayCharacterDetails(campaign.CampaignUsers[0], campaign.CampaignCharacters[0]);

            NewCampaign.Visible = true;
        }

        /// <summary>
        /// For a campaign that has already been generated, displays the selected party member's information
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void DDPartyMembers_SelectedIndexChanged(object sender, EventArgs e) {
            User user = generatedCampaign.CampaignUsers[DDPartyMembers.SelectedIndex];
            Character character = generatedCampaign.CampaignCharacters[DDPartyMembers.SelectedIndex];
            DisplayCharacterDetails(user, character);
        }

        /// <summary>
        /// Displays the selected campaign character in the generated campaign card
        /// </summary>
        /// <param name="user"></param>
        /// <param name="campaign"></param>
        private void DisplayCharacterDetails(User user, Character character) {
            CharacterUser.InnerText = user.FullName + " (" + user.Username + ")";

            RaceDesc.InnerText = character.Race.Name + ": " + character.Race.Description;
            BLLanguages.Items.Clear();
            foreach (Language language in character.Race.Languages) {
                BLLanguages.Items.Add(language.ToString());
            }

            ClassDesc.InnerText = character.CharacterClass.Name + ": " + character.CharacterClass.Description;
            BLFeatures.Items.Clear();
            foreach (Feature feature in character.CharacterClass.Features) {
                BLFeatures.Items.Add(feature.ToString());
            }
            HitDice.InnerText = character.CharacterClass.HitDice.ToString();
            BLSkills.Items.Clear();
            foreach (Skills skill in character.CharacterClass.CharacterSkills) {
                BLSkills.Items.Add(skill.ToString());
            }

            BackgroundDesc.InnerText = character.CharacterBackground.Name + ": " + character.CharacterBackground.Description;

            PhysicalDesc.InnerText = $"Hair: {character.Hair}, Eyes: {character.Eyes}, Skin: {character.Skin}";
        }

        /// <summary>
        /// Removes a selected character from the party
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void BtnRemoveCharacter_Click(object sender, EventArgs e) {
            Character removeCharacter = null;
            try {
                removeCharacter = selectedCharacters[LBPartyMembers.SelectedIndex];
            } catch (ArgumentOutOfRangeException ex) {
                LblCannotRemove.Text = "Please select a character from the list to remove.";
                return;
            }

            selectedCharacters.Remove(removeCharacter);
            Session["selectedCharacters"] = selectedCharacters;

            LBPartyMembers.DataSource = selectedCharacters;
            LBPartyMembers.DataBind();
        }

        /// <summary>
        /// Populates the available characters with the selected user's characters
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void DDCampaignUsers_SelectedIndexChanged(object sender, EventArgs e) {
            User selectedUser = validUsers[DDCampaignUsers.SelectedIndex];
            userCharacters = selectedUser.UserCharacters;
            Session["userCharacters"] = selectedUser.UserCharacters;

            DDCampaignCharacters.DataSource = userCharacters;
            DDCampaignCharacters.DataBind();
        }

        /// <summary>
        /// Adds the selected character to 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void BtnAddMember_Click(object sender, EventArgs e) {
            LblInvalidCharacter.Text = "";
            Character character = null;
            User user = null;
            try {
                character = userCharacters[DDCampaignCharacters.SelectedIndex];
                user = validUsers[DDCampaignUsers.SelectedIndex];
            } catch (ArgumentOutOfRangeException ex) {
                LblInvalidCharacter.Text = "That character cannot be added to the party.";
                return;
            }

            // Update Session
            if (Session["selectedCharacters"] != null && Session["selectedUsers"] != null) {
                selectedCharacters = (List<Character>)Session["selectedCharacters"];
                selectedUsers = (List<User>)Session["selectedUsers"];
            }

            // Ensure character is not already added
            foreach (Character selectedCharacter in selectedCharacters) {
                if (selectedCharacter.Equals(character)) {
                    LblInvalidCharacter.Text = "That character is already in the party.";
                    return;
                }
            }

            // If valid, add user and character
            selectedUsers.Add(user);
            Session["selectedUsers"] = selectedUsers;

            selectedCharacters.Add(character);
            Session["selectedCharacters"] = selectedCharacters;

            LBPartyMembers.DataSource = selectedCharacters;
            LBPartyMembers.DataBind();
        }

        /// <summary>
        /// Queries the database and retrieves all valid users that can then be added to the campaign
        /// 
        /// TODO: implement database functionality
        /// </summary>
        private void InitUsers() {
            // Create Characters
            Character character1 = new Character();
            character1.Name = "Test Character 1";
            character1.Strength = 20;
            character1.Dexterity = 20;
            character1.Constitution = 20;
            character1.Intelligence = 20;
            character1.Wisdom = 20;
            character1.Charisma = 20;
            character1.StrMod = 5;
            character1.DexMod = 5;
            character1.ConMod = 5;
            character1.IntMod = 5;
            character1.WisMod = 5;
            character1.ChrMod = 5;
            character1.FeatureList = new List<Feature>(
                    // Initializing list with features
                    new Feature[] {
                        new Feature("Second Wind",
                            "You have a limited well of stamina that you can draw on to protect " +
                            "yourself from harm."),
                        new Feature("Action Surge",
                            "You can push yourself beyond your normal limits for a moment. On your " +
                            "turn, you can take one additional action."),
                        new Feature("Martial Archetype",
                            "You choose an archetype that you strive to emulate in your combat styles " +
                            "and techniques. Choose Chamption, Battle Master, or Eldritch Knight.")
                    }
                );
            character1.CharacterBackground = new Background(
                "Acolyte",
                "You have spent your life in the service of a temple to a specific god or pantheon of gods.",
                new List<string>(
                    new string[] {
                        "I idolize a particular hero of my faith, and constantly refer to that person’s deeds and example.",
                        "I can find common ground between the fiercest enemies, empathizing with them and always working toward peace.",
                    }
                ),
                new List<string>(
                    new string[] {
                        "Tradition. The ancient traditions of worship and sacrifice must be preserved and upheld. (Lawful)",
                        "Charity. I always try to help those in need, no matter what the personal cost. (Good)",
                    }
                ),
                new List<string>(
                    new string[] {
                        "I would die to recover an ancient relic of my faith that was lost long ago.",
                        "I will someday get revenge on the corrupt temple hierarchy who branded me a heretic.",
                    }
                ),
                new List<string>(
                    new string[] {
                        "I judge others harshly, and myself even more severely.",
                        "I put too much trust in those who wield power within my temple’s hierarchy.",
                    }
                )
            );
            character1.Hair = "Red";
            character1.Eyes = "Brown";
            character1.Skin = "Scales";
            character1.AdditionalNotes = "N/A";
            character1.Race = new Race(
                "Dragonborn",
                "Dragonborn look very much like dragons standing erect in humanoid form, " +
                "though they lack wings or a tail.",
                new List<Language>(
                    new Language[] {
                        Language.Draconic
                    }
                )
            );
            character1.CharacterClass = new Class(
                "Fighter",
                "A master of martial combat, skilled with a variety of weapons and armor.",
                new List<Feature>(
                    // Initializing list with features
                    new Feature[] {
                        new Feature("Second Wind",
                            "You have a limited well of stamina that you can draw on to protect " +
                            "yourself from harm."),
                        new Feature("Action Surge",
                            "You can push yourself beyond your normal limits for a moment. On your " +
                            "turn, you can take one additional action."),
                        new Feature("Martial Archetype",
                            "You choose an archetype that you strive to emulate in your combat styles " +
                            "and techniques. Choose Chamption, Battle Master, or Eldritch Knight.")
                    }
                ),
                new Dice(10),
                new List<Skills>(
                    new Skills[] {
                        Skills.ACROBATICS,
                        Skills.ANIMAL_HANDLING,
                        Skills.ATHLETICS,
                        Skills.HISTORY,
                        Skills.INSIGHT,
                        Skills.INTIMIDATION,
                        Skills.PERCEPTION,
                        Skills.SURVIVAL
                    }
                )
            );

            Character character2 = new Character();
            character2.Name = "Test Character 2";
            character2.Strength = 20;
            character2.Dexterity = 20;
            character2.Constitution = 20;
            character2.Intelligence = 20;
            character2.Wisdom = 20;
            character2.Charisma = 20;
            character2.StrMod = 5;
            character2.DexMod = 5;
            character2.ConMod = 5;
            character2.IntMod = 5;
            character2.WisMod = 5;
            character2.ChrMod = 5;
            character2.FeatureList = new List<Feature>(
                    // Initializing list with features
                    new Feature[] {
                        new Feature("Second Wind",
                            "You have a limited well of stamina that you can draw on to protect " +
                            "yourself from harm."),
                        new Feature("Action Surge",
                            "You can push yourself beyond your normal limits for a moment. On your " +
                            "turn, you can take one additional action."),
                        new Feature("Martial Archetype",
                            "You choose an archetype that you strive to emulate in your combat styles " +
                            "and techniques. Choose Chamption, Battle Master, or Eldritch Knight.")
                    }
                );
            character2.CharacterBackground = new Background(
                "Acolyte",
                "You have spent your life in the service of a temple to a specific god or pantheon of gods.",
                new List<string>(
                    new string[] {
                        "I idolize a particular hero of my faith, and constantly refer to that person’s deeds and example.",
                        "I can find common ground between the fiercest enemies, empathizing with them and always working toward peace.",
                    }
                ),
                new List<string>(
                    new string[] {
                        "Tradition. The ancient traditions of worship and sacrifice must be preserved and upheld. (Lawful)",
                        "Charity. I always try to help those in need, no matter what the personal cost. (Good)",
                    }
                ),
                new List<string>(
                    new string[] {
                        "I would die to recover an ancient relic of my faith that was lost long ago.",
                        "I will someday get revenge on the corrupt temple hierarchy who branded me a heretic.",
                    }
                ),
                new List<string>(
                    new string[] {
                        "I judge others harshly, and myself even more severely.",
                        "I put too much trust in those who wield power within my temple’s hierarchy.",
                    }
                )
            );
            character2.Hair = "Red";
            character2.Eyes = "Brown";
            character2.Skin = "Scales";
            character2.AdditionalNotes = "N/A";
            character2.Race = new Race(
                "Dragonborn",
                "Dragonborn look very much like dragons standing erect in humanoid form, " +
                "though they lack wings or a tail.",
                new List<Language>(
                    new Language[] {
                        Language.Draconic
                    }
                )
            );
            character2.CharacterClass = new Class(
                "Fighter",
                "A master of martial combat, skilled with a variety of weapons and armor.",
                new List<Feature>(
                    // Initializing list with features
                    new Feature[] {
                        new Feature("Second Wind",
                            "You have a limited well of stamina that you can draw on to protect " +
                            "yourself from harm."),
                        new Feature("Action Surge",
                            "You can push yourself beyond your normal limits for a moment. On your " +
                            "turn, you can take one additional action."),
                        new Feature("Martial Archetype",
                            "You choose an archetype that you strive to emulate in your combat styles " +
                            "and techniques. Choose Chamption, Battle Master, or Eldritch Knight.")
                    }
                ),
                new Dice(10),
                new List<Skills>(
                    new Skills[] {
                        Skills.ACROBATICS,
                        Skills.ANIMAL_HANDLING,
                        Skills.ATHLETICS,
                        Skills.HISTORY,
                        Skills.INSIGHT,
                        Skills.INTIMIDATION,
                        Skills.PERCEPTION,
                        Skills.SURVIVAL
                    }
                )
            );

            Character character3 = new Character();
            character3.Name = "Test Character 3";
            character3.Strength = 20;
            character3.Dexterity = 20;
            character3.Constitution = 20;
            character3.Intelligence = 20;
            character3.Wisdom = 20;
            character3.Charisma = 20;
            character3.StrMod = 5;
            character3.DexMod = 5;
            character3.ConMod = 5;
            character3.IntMod = 5;
            character3.WisMod = 5;
            character3.ChrMod = 5;
            character3.FeatureList = new List<Feature>(
                    // Initializing list with features
                    new Feature[] {
                        new Feature("Second Wind",
                            "You have a limited well of stamina that you can draw on to protect " +
                            "yourself from harm."),
                        new Feature("Action Surge",
                            "You can push yourself beyond your normal limits for a moment. On your " +
                            "turn, you can take one additional action."),
                        new Feature("Martial Archetype",
                            "You choose an archetype that you strive to emulate in your combat styles " +
                            "and techniques. Choose Chamption, Battle Master, or Eldritch Knight.")
                    }
                );
            character3.CharacterBackground = new Background(
                "Acolyte",
                "You have spent your life in the service of a temple to a specific god or pantheon of gods.",
                new List<string>(
                    new string[] {
                        "I idolize a particular hero of my faith, and constantly refer to that person’s deeds and example.",
                        "I can find common ground between the fiercest enemies, empathizing with them and always working toward peace.",
                    }
                ),
                new List<string>(
                    new string[] {
                        "Tradition. The ancient traditions of worship and sacrifice must be preserved and upheld. (Lawful)",
                        "Charity. I always try to help those in need, no matter what the personal cost. (Good)",
                    }
                ),
                new List<string>(
                    new string[] {
                        "I would die to recover an ancient relic of my faith that was lost long ago.",
                        "I will someday get revenge on the corrupt temple hierarchy who branded me a heretic.",
                    }
                ),
                new List<string>(
                    new string[] {
                        "I judge others harshly, and myself even more severely.",
                        "I put too much trust in those who wield power within my temple’s hierarchy.",
                    }
                )
            );
            character3.Hair = "Red";
            character3.Eyes = "Brown";
            character3.Skin = "Scales";
            character3.AdditionalNotes = "N/A";
            character3.Race = new Race(
                "Dragonborn",
                "Dragonborn look very much like dragons standing erect in humanoid form, " +
                "though they lack wings or a tail.",
                new List<Language>(
                    new Language[] {
                        Language.Draconic
                    }
                )
            );
            character3.CharacterClass = new Class(
                "Fighter",
                "A master of martial combat, skilled with a variety of weapons and armor.",
                new List<Feature>(
                    // Initializing list with features
                    new Feature[] {
                        new Feature("Second Wind",
                            "You have a limited well of stamina that you can draw on to protect " +
                            "yourself from harm."),
                        new Feature("Action Surge",
                            "You can push yourself beyond your normal limits for a moment. On your " +
                            "turn, you can take one additional action."),
                        new Feature("Martial Archetype",
                            "You choose an archetype that you strive to emulate in your combat styles " +
                            "and techniques. Choose Chamption, Battle Master, or Eldritch Knight.")
                    }
                ),
                new Dice(10),
                new List<Skills>(
                    new Skills[] {
                        Skills.ACROBATICS,
                        Skills.ANIMAL_HANDLING,
                        Skills.ATHLETICS,
                        Skills.HISTORY,
                        Skills.INSIGHT,
                        Skills.INTIMIDATION,
                        Skills.PERCEPTION,
                        Skills.SURVIVAL
                    }
                )
            );

            // Create user which references these characters
            User testuser0 = new User(
                "testuser0",
                "Test User 0",
                new List<Character>(), // Has no characters
                "password",
                new List<Campaign>()
            );

            User testuser1 = new User(
                "testuser1",
                "Test User 1",
                new List<Character>(
                    new Character[] {
                        character1
                    }
                ),
                "password",
                new List<Campaign>()
            );

            User testuser2 = new User(
                "testuser2",
                "Test User 2",
                new List<Character>(
                    new Character[] {
                        character2,
                        character3
                    }
                ),
                "password",
                new List<Campaign>()
            );

            validUsers.Add(testuser0);
            validUsers.Add(testuser1);
            validUsers.Add(testuser2);

            Campaign campaign = new Campaign(
                "Campaign 1",
                "A test campaign",
                new List<User>(
                    new User[] {
                        testuser1,
                        testuser2
                    }
                ),
                new List<Character>(
                    new Character[] {
                        testuser1.GetCharacterByName("Test Character 1"),
                        testuser2.GetCharacterByName("Test Character 2")
                    }
                ),
                testuser0
            );
            campaign.AddCampaignToAllUsers();
        }
    }
}