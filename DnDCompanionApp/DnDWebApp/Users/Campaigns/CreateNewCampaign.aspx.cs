using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using UserManagementLib;
using CharacterCreationLib;
using DnDSQLLib.dal;

namespace DnDWebApp.Users.Campaigns {
    public partial class CreateNewCampaign : System.Web.UI.Page {

        /// <summary>
        /// All users available to be added to the campaign
        /// </summary>
        List<User> validUsers = new List<User>();
        /// <summary>
        /// The current selected user's characters
        /// </summary>
        List<Character> userCharacters = new List<Character>();
        /// <summary>
        /// The current users that have been added to the party
        /// </summary>
        List<User> selectedUsers = new List<User>();
        /// <summary>
        /// The current characters that have been added to the party
        /// </summary>
        List<Character> selectedCharacters = new List<Character>();
        /// <summary>
        /// The campaign that will be generated by this form
        /// </summary>
        Campaign generatedCampaign;

        /// <summary>
        /// Retrieves valid users from database and binds form elements to users and characters available
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void Page_Load(object sender, EventArgs e) {
            InitUsers();

            if (!IsPostBack) {
                DDDMUsers.DataSource = validUsers;
                DDDMUsers.DataBind();

                DDCampaignUsers.DataSource = validUsers;
                DDCampaignUsers.DataBind();

                UserDAO userDAO = new UserDAO();
                DDCampaignCharacters.DataSource = userDAO.GetUserCharacters(validUsers[0].ID);
                DDCampaignCharacters.DataBind();

                Session["userCharacters"] = userCharacters;
                Session["selectedUsers"] = selectedUsers;
                Session["selectedCharacters"] = selectedCharacters;
            } else {
                userCharacters = (List<Character>)Session["userCharacters"];
                selectedUsers = (List<User>)Session["selectedUsers"];
                selectedCharacters = (List<Character>)Session["selectedCharacters"];
            }

            if (Session["generatedCampaign"] != null) {
                generatedCampaign = (Campaign)Session["generatedCampaign"];
            }
        }

        /// <summary>
        /// Validates form input, generates a campaign, and displays it
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void BtnGenerate_Click(object sender, EventArgs e) {
            string name = TxtName.Text;
            string description = TxtDescription.Text;
            User dm = validUsers[DDDMUsers.SelectedIndex];
            List<User> campaignUsers = selectedUsers;
            List<Character> campaignCharacters = selectedCharacters;

            Campaign campaign = null;
            try {
                campaign = new Campaign(name, description, campaignUsers, campaignCharacters, dm);
            } catch (ArgumentException ex) {
                LblErrorGenerate.Text = ex.Message;
                return;
            }

            Session["generatedCampaign"] = campaign;
            DisplayCampaign(campaign);
        }

        /// <summary>
        /// Takes the generated campaign and saves it to the user's campaigns
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void BtnSave_Click(object sender, EventArgs e) {
            Campaign saveCampaign = (Campaign)Session["generatedCampaign"];

            CampaignDAO campaignDAO = new CampaignDAO();
            campaignDAO.UploadCampaign(saveCampaign);

            Response.Redirect("~/Users/Campaigns/SeeAllCampaigns.aspx?newCampaign=true");
        }

        /// <summary>
        /// Discards the current campaign that was generated
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void BtnDiscard_Click(object sender, EventArgs e) {
            Response.Redirect("~/Users/Campaigns/CreateNewCampaign.aspx");
        }

        /// <summary>
        /// Displays the campaign that was generated
        /// </summary>
        /// <param name="campaign"></param>
        private void DisplayCampaign(Campaign campaign) {
            LblCampaignName.Text = campaign.CampaignName;
            CampaignDescription.InnerText = campaign.CampaignDescription;
            DMName.InnerText = campaign.DungeonMaster.FullName + " (" + campaign.DungeonMaster.Username + ")";

            DDPartyMembers.DataSource = campaign.CampaignCharacters;
            DDPartyMembers.DataBind();

            // Ensure the first character is displayed
            DisplayCharacterDetails(campaign.CampaignUsers[0], campaign.CampaignCharacters[0]);

            NewCampaign.Visible = true;
        }

        /// <summary>
        /// For a campaign that has already been generated, displays the selected party member's information
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void DDPartyMembers_SelectedIndexChanged(object sender, EventArgs e) {
            User user = generatedCampaign.CampaignUsers[DDPartyMembers.SelectedIndex];
            Character character = generatedCampaign.CampaignCharacters[DDPartyMembers.SelectedIndex];
            DisplayCharacterDetails(user, character);
        }

        /// <summary>
        /// Displays the selected campaign character in the generated campaign card
        /// </summary>
        /// <param name="user"></param>
        /// <param name="campaign"></param>
        private void DisplayCharacterDetails(User user, Character character) {
            CharacterUser.InnerText = user.FullName + " (" + user.Username + ")";

            RaceDesc.InnerText = character.Race.Name + ": " + character.Race.Description;
            BLLanguages.Items.Clear();
            foreach (Language language in character.Race.Languages) {
                BLLanguages.Items.Add(EnumPrettify.Prettify(language.ToString()));
            }

            ClassDesc.InnerText = character.CharacterClass.Name + ": " + character.CharacterClass.Description;
            BLFeatures.Items.Clear();
            foreach (Feature feature in character.CharacterClass.Features) {
                BLFeatures.Items.Add(feature.ToString());
            }
            HitDice.InnerText = character.CharacterClass.HitDice.ToString();
            BLSkills.Items.Clear();
            foreach (Skills skill in character.CharacterClass.CharacterSkills) {
                BLSkills.Items.Add(EnumPrettify.Prettify(skill.ToString()));
            }

            BackgroundDesc.InnerText = character.CharacterBackground.Name + ": " + character.CharacterBackground.Description;

            PhysicalDesc.InnerText = $"Hair: {character.Hair}, Eyes: {character.Eyes}, Skin: {character.Skin}";
        }

        /// <summary>
        /// Removes a selected character from the party
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void BtnRemoveCharacter_Click(object sender, EventArgs e) {
            Character removeCharacter = null;
            try {
                removeCharacter = selectedCharacters[LBPartyMembers.SelectedIndex];
            } catch (ArgumentOutOfRangeException ex) {
                LblCannotRemove.Text = "Please select a character from the list to remove.";
                return;
            }

            selectedCharacters.Remove(removeCharacter);
            Session["selectedCharacters"] = selectedCharacters;

            LBPartyMembers.DataSource = selectedCharacters;
            LBPartyMembers.DataBind();
        }

        /// <summary>
        /// Populates the available characters with the selected user's characters
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void DDCampaignUsers_SelectedIndexChanged(object sender, EventArgs e) {
            User selectedUser = validUsers[DDCampaignUsers.SelectedIndex];

            UserDAO userDAO = new UserDAO();
            userCharacters = userDAO.GetUserCharacters(selectedUser.ID);
            Session["userCharacters"] = userCharacters;

            DDCampaignCharacters.DataSource = userCharacters;
            DDCampaignCharacters.DataBind();
        }

        /// <summary>
        /// Adds the selected character to 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void BtnAddMember_Click(object sender, EventArgs e) {
            LblInvalidCharacter.Text = "";
            Character character = null;
            User user = null;
            try {
                character = userCharacters[DDCampaignCharacters.SelectedIndex];
                user = validUsers[DDCampaignUsers.SelectedIndex];
            } catch (ArgumentOutOfRangeException ex) {
                LblInvalidCharacter.Text = "That character cannot be added to the party.";
                return;
            }

            // Update Session
            if (Session["selectedCharacters"] != null && Session["selectedUsers"] != null) {
                selectedCharacters = (List<Character>)Session["selectedCharacters"];
                selectedUsers = (List<User>)Session["selectedUsers"];
            }

            // Ensure character is not already added
            foreach (Character selectedCharacter in selectedCharacters) {
                if (selectedCharacter.Equals(character)) {
                    LblInvalidCharacter.Text = "That character is already in the party.";
                    return;
                }
            }

            // If valid, add user and character
            selectedUsers.Add(user);
            Session["selectedUsers"] = selectedUsers;

            selectedCharacters.Add(character);
            Session["selectedCharacters"] = selectedCharacters;

            LBPartyMembers.DataSource = selectedCharacters;
            LBPartyMembers.DataBind();
        }

        /// <summary>
        /// Queries the database and retrieves all valid users that can then be added to the campaign
        /// </summary>
        private void InitUsers() {
            UserDAO userDAO = new UserDAO();
            validUsers = userDAO.GetAllUsers();
        }
    }
}